"use strict";(self.webpackChunkneonwp=self.webpackChunkneonwp||[]).push([[5485],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return k}});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=o.createContext({}),i=function(e){var n=o.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=i(e.components);return o.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=i(t),k=a,d=u["".concat(p,".").concat(k)]||u[k]||m[k]||r;return t?o.createElement(d,l(l({ref:n},c),{},{components:t})):o.createElement(d,l({ref:n},c))}));function k(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,l=new Array(r);l[0]=u;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var i=2;i<r;i++)l[i]=t[i];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},2955:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return p},default:function(){return k},frontMatter:function(){return s},metadata:function(){return i},toc:function(){return m}});var o=t(7462),a=t(3366),r=(t(7294),t(3905)),l=["components"],s={sidebar_position:3,title:"\u914d\u7f6e\u672c\u5730Neon EVM \u73af\u5883 (Setting Up the Local Neon EVM Environment)"},p=void 0,i={unversionedId:"05Developing/02Setting up Environment/03Setting Up the Local Neon EVM Environment",id:"05Developing/02Setting up Environment/03Setting Up the Local Neon EVM Environment",title:"\u914d\u7f6e\u672c\u5730Neon EVM \u73af\u5883 (Setting Up the Local Neon EVM Environment)",description:"This step-by-step guide describes how to install, configure, and test the local Solana cluster with Neon EVM onboard. It will help new developers create their own environment and run Ethereum programs wrapped into the Neon EVM.",source:"@site/docs/05Developing/02Setting up Environment/03Setting Up the Local Neon EVM Environment.md",sourceDirName:"05Developing/02Setting up Environment",slug:"/05Developing/02Setting up Environment/03Setting Up the Local Neon EVM Environment",permalink:"/neonwp/05Developing/02Setting up Environment/03Setting Up the Local Neon EVM Environment",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/05Developing/02Setting up Environment/03Setting Up the Local Neon EVM Environment.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"\u914d\u7f6e\u672c\u5730Neon EVM \u73af\u5883 (Setting Up the Local Neon EVM Environment)"},sidebar:"tutorialSidebar",previous:{title:"\u8fde\u63a5\u5230 Neon\u4ee3\u7406 (Connecting to the Neon Proxy)",permalink:"/neonwp/05Developing/02Setting up Environment/02Connecting to the Neon Proxy"},next:{title:"\u4f7f\u7528Remix (Using Remix)",permalink:"/neonwp/05Developing/03Deploying dApps/01iUsing Remix"}},c={},m=[{value:"\u5148\u51b3\u6761\u4ef6 (Prerequisites)",id:"\u5148\u51b3\u6761\u4ef6-prerequisites",level:4},{value:"\u914d\u7f6eNeon\u672c\u5730\u5de5\u4f5c\u73af\u5883 (Setting up the Neon Local Workspace Environment)",id:"\u914d\u7f6eneon\u672c\u5730\u5de5\u4f5c\u73af\u5883-setting-up-the-neon-local-workspace-environment",level:4},{value:"\u65e5\u5fd7 (Logs)",id:"\u65e5\u5fd7-logs",level:4},{value:"Neon EVM\u5185\u4f7f\u7528Remix\u548cMetamask (Remix and MetaMask with the Neon EVM)",id:"neon-evm\u5185\u4f7f\u7528remix\u548cmetamask-remix-and-metamask-with-the-neon-evm",level:4},{value:"Neon EVM \u7684Truffle\u5957\u4ef6 (Truffle Suite with Neon EVM",id:"neon-evm-\u7684truffle\u5957\u4ef6-truffle-suite-with-neon-evm",level:4},{value:"Truffle\u8bbe\u7f6e (Common Truffle Settings)",id:"truffle\u8bbe\u7f6e-common-truffle-settings",level:5},{value:"\u521b\u5efa\u5408\u7ea6 (Contract Creation)",id:"\u521b\u5efa\u5408\u7ea6-contract-creation",level:5},{value:"\u6d4b\u8bd5 (Testing)",id:"\u6d4b\u8bd5-testing",level:5},{value:"\u53ef\u80fd\u7684\u95ee\u9898 (Possible Problems)",id:"\u53ef\u80fd\u7684\u95ee\u9898-possible-problems",level:5}],u={toc:m};function k(e){var n=e.components,t=(0,a.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This step-by-step guide describes how to install, configure, and test the local Solana cluster with Neon EVM onboard. It will help new developers create their own environment and run Ethereum programs wrapped into the Neon EVM."),(0,r.kt)("p",null,"\u672c\u6307\u5357\u4ecb\u7ecd\u4e86\u5982\u4f55\u4e00\u6b65\u6b65\u4f7f\u7528Neon EVM \u5b89\u88c5\u3001\u914d\u7f6e\u548c\u6d4b\u8bd5\u672c\u5730 Solana \u96c6\u7fa4\u3002\u5b83\u5c06\u5e2e\u52a9\u65b0\u5f00\u53d1\u4eba\u5458\u521b\u5efa\u81ea\u5df1\u7684\u73af\u5883\u5e76\u8fd0\u884c\u5c01\u88c5\u5728 Neon EVM \u4e2d\u7684\u4ee5\u592a\u574a\u7a0b\u5e8f\u3002"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://neon-labs.org/"},"Neon EVM")," is a solution that performs transaction execution outside layer 1. The development process can be run on any modern Linux or Mac system, though this document is based on an Ubuntu 20.04 experience."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://neon-labs.org/"},"Neon EVM")," \u662f\u4e00\u79cd\u5728\u7b2c 1 \u5c42\uff08layer 1\uff09\u4e4b\u5916\u6267\u884c\u4ea4\u6613\u7684\u89e3\u51b3\u65b9\u6848\u3002\u867d\u7136\u672c\u6587\u6863\u57fa\u4e8e Ubuntu 20.04\uff0c\u4f46\u5f00\u53d1\u8fc7\u7a0b\u53ef\u4ee5\u5728\u4efb\u4f55\u73b0\u4ee3 Linux \u6216 Mac \u7cfb\u7edf\u4e0a\u8fd0\u884c\uff0c\u3002"),(0,r.kt)("p",null,"All the services in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Neon EVM environment")," presented by the docker-compose configuration files can be interchangeably substituted with their experimental versions in order to develop and test each service independently. To resolve issues, the Neon engineer has to be able to replace any service with a customized one according to the current requirements. You are welcome to change the following docker-compose configuration files based on your needs. Also, you can bring them altogether in a single docker-compose file, it is important to provide dependencies according to the following sequence."),(0,r.kt)("p",null,"Docker-compose \u914d\u7f6e\u6587\u4ef6\u63d0\u4f9b\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"Neon EVM \u73af\u5883")," \u4e2d\u7684\u6240\u6709\u670d\u52a1\uff0c\u90fd\u53ef\u4ee5\u66ff\u6362\u4e3a\u5bf9\u5e94\u7684\u5b9e\u9a8c\u7248\u672c\uff0c\u4ee5\u4fbf\u72ec\u7acb\u5f00\u53d1\u548c\u6d4b\u8bd5\u6bcf\u4e2a\u670d\u52a1\u3002\u4e3a\u4e86\u89e3\u51b3\u95ee\u9898\uff0c Neon\u5de5\u7a0b\u5e08\u5fc5\u987b\u8981\u80fd\u591f\u6839\u636e\u5f53\u524d\u9700\u6c42\uff0c\u5c06\u4efb\u4f55\u670d\u52a1\u66ff\u6362\u4e3a\u5b9a\u5236\u670d\u52a1\u3002\u6b22\u8fce\u60a8\u6839\u636e\u9700\u8981\u66f4\u6539\u4ee5\u4e0b docker-compose \u914d\u7f6e\u6587\u4ef6\u3002\u6b64\u5916\uff0c\u60a8\u53ef\u4ee5\u5c06\u5b83\u4eec\u5b8c\u5168\u653e\u5728\u4e00\u4e2a docker-compose \u6587\u4ef6\u4e2d\uff0c\u6839\u636e\u4ee5\u4e0b\u987a\u5e8f\u63d0\u4f9b\u4f9d\u8d56\u9879\u5f88\u91cd\u8981\u3002"),(0,r.kt)("p",null,"Before you start to build your local environment, make sure you have all the ",(0,r.kt)("a",{parentName:"p",href:"#%E5%85%88%E5%86%B3%E6%9D%A1%E4%BB%B6Prerequisites"},"prerequisites"),"."),(0,r.kt)("p",null,"\u5728\u5f00\u59cb\u6784\u5efa\u672c\u5730\u73af\u5883\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u5177\u5907\u6240\u6709\u5148\u51b3\u6761\u4ef6\u3002"),(0,r.kt)("h4",{id:"\u5148\u51b3\u6761\u4ef6-prerequisites"},"\u5148\u51b3\u6761\u4ef6 (Prerequisites)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Docker")," --- for docker installation, please follow instructions at: ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/install/ubuntu/"},"https://docs.docker.com/engine/install/ubuntu/"),(0,r.kt)("br",{parentName:"p"}),"\n","",(0,r.kt)("strong",{parentName:"p"},"Docker")," --- \u5bf9\u4e8e docker > \u5b89\u88c5\uff0c\u8bf7\u6309\u7167\u4ee5\u4e0b\u8bf4\u660e\u64cd\u4f5c\uff1a",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/install/ubuntu/"},"https://docs.docker.com/engine/install/ubuntu/"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Docker Compose")," --- Docker Compose is required to start up containers at : ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/install/"},"https://docs.docker.com/compose/install/"),(0,r.kt)("br",{parentName:"p"}),"\n","",(0,r.kt)("strong",{parentName:"p"},"Docker Compose")," --- Docker Compose > \u9700\u8981\u5728\u4ee5\u4e0b\u4f4d\u7f6e\u542f\u52a8\u5bb9\u5668\uff1a",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/install/"},"https://docs.docker.com/compose/install/"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Solana Tool Suite")," --- for interaction with Solana, we need to install Solana CLI Tools: ",(0,r.kt)("a",{parentName:"p",href:"https://docs.solana.com/ru/cli/install-solana-cli-tools"},"https://docs.solana.com/ru/cli/install-solana-cli-tools"),(0,r.kt)("br",{parentName:"p"}),"\n","",(0,r.kt)("strong",{parentName:"p"},"Solana Tool Suite")," --- \u4e3a\u4e86\u4e0e Solana \u4ea4\u4e92\uff0c\u6211\u4eec\u9700\u8981\u5b89\u88c5 Solana CLI > Tools\uff1a",(0,r.kt)("a",{parentName:"p",href:"https://docs.solana.com/ru/cli/install-solana-cli-tools"},"https://docs.solana.com/ru/cli/install-solana-cli-tools"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"A Chromium-based browser")," --- for ",(0,r.kt)("a",{parentName:"p",href:"https://metamask.io/"},"MetaMask")," and ",(0,r.kt)("a",{parentName:"p",href:"https://remix.ethereum.org/"},"Remix"),(0,r.kt)("br",{parentName:"p"}),"\n","",(0,r.kt)("strong",{parentName:"p"},"\u57fa\u4e8e Chromium \u7684\u6d4f\u89c8\u5668")," ---\u7528\u4e8e ",(0,r.kt)("a",{parentName:"p",href:"https://metamask.io/"},"MetaMask")," \u548c ",(0,r.kt)("a",{parentName:"p",href:"https://remix.ethereum.org/"},"Remix"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Node package manager")," --- ",(0,r.kt)("a",{parentName:"p",href:"https://www.w3schools.com/nodejs/nodejs_npm.asp"},"Node.js/npm")," to interact with he Neon EVM with ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/web3"},"Web3")," and ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/web3-eth"},"Eth")," modules.",(0,r.kt)("br",{parentName:"p"}),"\n","",(0,r.kt)("strong",{parentName:"p"},"\u8282\u70b9\u5305\u7ba1\u7406\u5668")," --- ",(0,r.kt)("a",{parentName:"p",href:"https://www.w3schools.com/nodejs/nodejs_npm.asp"},"Node.js/npm")," \u4e0e\u5e26\u6709 ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/web3"},"Web3")," \u548c ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/web3-eth"},"Eth")," \u6a21\u5757\u7684 Neon EVM \u4ea4\u4e92\u3002"))),(0,r.kt)("h4",{id:"\u914d\u7f6eneon\u672c\u5730\u5de5\u4f5c\u73af\u5883-setting-up-the-neon-local-workspace-environment"},"\u914d\u7f6eNeon\u672c\u5730\u5de5\u4f5c\u73af\u5883 (Setting up the Neon Local Workspace Environment)"),(0,r.kt)("p",null,"Currently, the most flexible way is to use the set of independent docker containers sharing the common external network. To create the network called ",(0,r.kt)("inlineCode",{parentName:"p"},"local")," that will be used over the docker containers, just input the following command:"),(0,r.kt)("p",null,"\u76ee\u524d\uff0c\u6700\u7075\u6d3b\u7684\u65b9\u5f0f\u662f\u4f7f\u7528\u4e00\u7ec4\u72ec\u7acb\u7684, \u5171\u4eab\u516c\u5171\u5916\u90e8\u7f51\u7edc\u7684docker \u5bb9\u5668\u3002\u8981\u5728 docker \u5bb9\u5668\u4e0a\u521b\u5efa\u4f7f\u7528\u540d\u4e3a",(0,r.kt)("inlineCode",{parentName:"p"},"\u672c\u5730 (local)")," \u7684\u7f51\u7edc\uff0c\u53ea\u9700\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker network create local\n")),(0,r.kt)("p",null,"If you want to bind some ports from the service to the host machine to be able to connect them and work with a service independently, just extend a ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," configurations with the ports instruction. For example, you can bind the Solana (8899, 8900)- or Proxy (9090)-related ports to the host machine this way."),(0,r.kt)("p",null,"\u5982\u679c\u60a8\u60f3\u5c06\u4e00\u4e9b\u7aef\u53e3\u4ece\u670d\u52a1\u7ed1\u5b9a\u5230\u4e3b\u673a\uff0c\u4ece\u800c\u80fd\u591f\u8fde\u63a5\u5b83\u4eec\u5e76\u72ec\u7acb\u4f7f\u7528\u670d\u52a1\uff0c\u53ea\u9700\u4f7f\u7528\u7aef\u53e3\u6307\u4ee4\u6269\u5c55 ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," \u914d\u7f6e\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u5c06 Solana\uff088899\u30018900\uff09\u6216\u4ee3\u7406\uff089090\uff09\u76f8\u5173\u7aef\u53e3\u7ed1\u5b9a\u5230\u4e3b\u673a\u3002"),(0,r.kt)("p",null,"After establishing the local network, it's time to start the following containers:"),(0,r.kt)("p",null,"\u5efa\u7acb\u672c\u5730\u7f51\u7edc\u540e\uff0c\u5c31\u53ef\u4ee5\u542f\u52a8\u4ee5\u4e0b\u5bb9\u5668\u4e86\uff1a"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Solana\u9a8c\u8bc1\u8005\u670d\u52a1 (Solana validator service)"))),(0,r.kt)("p",null,"This service presents the Solana validator running inside the container"),(0,r.kt)("p",null,"\u6b64\u670d\u52a1\u63d0\u4f9b\u5728\u5bb9\u5668\u5185\u8fd0\u884c\u7684 Solana \u9a8c\u8bc1\u8005"),(0,r.kt)("p",null,"Once you deploy the environment, you'll have the Solana RPC endpoint working from the docker container at the 9090 port. The folder named \"solana_state\" will be created as well. It contains the Solana ledger to keep the state over restarts. If you need to reset the ledger, just remove this folder and it'll be recreated the next time you run docker-compose."),(0,r.kt)("p",null,'\u90e8\u7f72\u73af\u5883\u540e\uff0c\u60a8\u53ef\u4ee5\u8ba9 Solana RPC \u7aef\u70b9\u4ecedocker \u5bb9\u5668\u76849090 \u7aef\u53e3\u5de5\u4f5c\u3002\u540d\u4e3a"solana_state"\u7684\u6587\u4ef6\u5939\u4e5f\u4f1a\u88ab\u521b\u5efa\u3002\u5b83\u5305\u542b Solana \u8d26\u672c\uff0c\u7528\u4e8e\u5728\u91cd\u542f\u65f6\u4fdd\u6301\u72b6\u6001\u3002\u5982\u679c\u60a8\u9700\u8981\u91cd\u7f6e\u8d26\u672c\uff0c\u53ea\u9700\u5220\u9664\u6b64\u6587\u4ef6\u5939\uff0c\u5b83\u5c06\u5728\u60a8\u4e0b\u6b21\u8fd0\u884c docker-compose \u65f6\u91cd\u65b0\u521b\u5efa\u3002'),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"docker-compose.yml")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},'version: "3"\n\nservices:\n  solana:\n    container_name: solana\n    image: neonlabsorg/solana:${SOLANA_REVISION:-v1.9.12-testnet}\n    environment:\n      SOLANA_URL: http://solana:8899\n      RUST_LOG: solana_runtime::system_instruction_processor=trace,solana_runtime::message_processor=debug,solana_bpf_loader=debug,solana_rbpf=debug\n    expose:\n      - 8899\n      - 8900\n    networks:\n      - net\n    healthcheck:\n      test: [ CMD-SHELL, "solana cluster-version -u http://solana:8899" ]\n      interval: 5s\n      timeout: 10s\n      retries: 10\n      start_period: 10s\n    volumes:\n      - "./solana_state:/opt/solana/config/"\n\nnetworks:\n  net:\n    external: yes\n    name: local\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"How to run it in bash"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"\u5982\u4f55\u5728bash\u4e2d\u8fd0\u884c")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ docker-compose -f solana/docker-compose.yml pull\n$ docker-compose -f solana/docker-compose.yml up -d\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"EVM\u52a0\u8f7d\u8005\u670d\u52a1 (EVM loader service)"))),(0,r.kt)("p",null,"This container helps deploy the Neon EVM base contract onto Solana that listens for incoming connections on the port 8899"),(0,r.kt)("p",null,"\u8fd9\u4e2a\u5bb9\u5668\u5e2e\u52a9\u5c06 Neon EVM \u57fa\u7840\u5408\u7ea6\u90e8\u7f72\u5230 Solana \u4e0a\uff0c\u76d1\u542c\u7aef\u53e3 8899\u7684\u4f20\u5165\u8fde\u63a5"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"docker-compose.yml")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},'version: "3"\n\nservices:\n  evm_loader:\n    container_name: evm_loader\n    image: neonlabsorg/evm_loader:latest\n    environment:\n      - SOLANA_URL=http://solana:8899\n    networks:\n      - net\n    command: bash -c "create-test-accounts.sh 1 && deploy-evm.sh && /opt/spl-token create-account HPsV9Deocecw3GeZv1FkAPNCBRfuVyfw9MMwjwRe1xaU && /opt/spl-token mint HPsV9Deocecw3GeZv1FkAPNCBRfuVyfw9MMwjwRe1xaU 1000000000 --owner /opt/evm_loader-keypair.json -- HX14J4Pp9CgSbWP13Dtpm8VLJpNxMYffLtRCRGsx7Edv"\n\nnetworks:\n  net:\n    external: yes\n    name: local\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"How to run it in bash"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"\u5982\u4f55\u5728bash\u4e2d\u8fd0\u884c")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ docker-compose -f evm-loader/docker-compose.yml pull\n$ docker-compose -f evm-loader/docker-compose.yml up\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"\u6570\u636e\u5e93\u670d\u52a1 (Database services)"))),(0,r.kt)("p",null,"This container aims to handle the database that stores all the relevant Ethereum processing metadata linked to each other: ",(0,r.kt)("inlineCode",{parentName:"p"},"transactions, blocks, receipts, accounts")," etc. This data is consumed by the indexer service."),(0,r.kt)("p",null,"\u8be5\u5bb9\u5668\u65e8\u5728\u638c\u63a7\u6240\u6709\u4e0e\u4ee5\u592a\u574a\u5904\u7406\u5143\u6570\u636e\u76f8\u5173\u7684\u6570\u636e\u5e93\uff1a",(0,r.kt)("inlineCode",{parentName:"p"},"\u4ea4\u6613\u3001\u533a\u5757\u3001\u56de\u6267\u3001\u8d26\u6237"),"\u7b49\u3002\u8fd9\u4e9b\u6570\u636e\u7531\u7d22\u5f15\u670d\u52a1\u4f7f\u7528\u3002"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"docker-compose.yml")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},'version: "3"\n\nservices:\n  postgres:\n    container_name: postgres\n    image: postgres:14.0\n    command: postgres -c \'max_connections=1000\'\n    environment:\n      POSTGRES_DB: neon-db\n      POSTGRES_USER: neon-proxy\n      POSTGRES_PASSWORD: neon-proxy-pass\n    hostname: postgres\n    healthcheck:\n      test: [ CMD-SHELL, "pg_isready -h postgres -p 5432" ]\n      interval: 5s\n      timeout: 10s\n      retries: 10\n      start_period: 5s\n    networks:\n      - net\n    ports:\n      - "127.0.0.1:5432:5432"\n    expose:\n      - "5432"\n\n  dbcreation:\n    container_name: dbcreation\n    image: neonlabsorg/proxy:latest\n    environment:\n      SOLANA_URL: http://solana:8899\n      POSTGRES_DB: neon-db\n      POSTGRES_USER: neon-proxy\n      POSTGRES_PASSWORD: neon-proxy-pass\n      POSTGRES_HOST: postgres\n    entrypoint: proxy/run-dbcreation.sh\n    networks:\n      - net\n    depends_on:\n      postgres:\n        condition: service_healthy\n\n\nnetworks:\n  net:\n    external: yes\n    name: local\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"How to run it in bash"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"\u5982\u4f55\u5728bash\u4e2d\u8fd0\u884c")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ docker-compose -f postgres/docker-compose.yml pull\n$ docker-compose -f postgres/docker-compose.yml up -d\n")),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"\u7d22\u5f15\u670d\u52a1 (Indexer service)"))),(0,r.kt)("p",null,"The indexer service indexes all the relevant Ethereum processing metadata consisting of ",(0,r.kt)("inlineCode",{parentName:"p"},"signatures"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"transactions"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"blocks"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"receipts"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"accounts"),",etc. It gathers all this data from the Solana blockchain, filtering them by the EVM contract address. It also makes it possible to provide our users with the Ethereum API according to the data provided by the whole known operators."),(0,r.kt)("p",null,"\u7d22\u5f15\u670d\u52a1\u5c06\u6240\u6709\u76f8\u5173\u4ee5\u592a\u574a\u5904\u7406\u5143\u6570\u636e\u8fdb\u884c\u7d22\u5f15\u5316\uff0c\u5305\u62ec",(0,r.kt)("inlineCode",{parentName:"p"},"\u7b7e\u540d\u3001\u4ea4\u6613\u3001\u533a\u5757\u3001\u56de\u6267\u3001\u8d26\u6237"),"\u7b49\u3002\u5b83\u4ece Solana \u533a\u5757\u94fe\u6536\u96c6\u6240\u6709\u8fd9\u4e9b\u6570\u636e\uff0c\u5e76\u901a\u8fc7 EVM \u5408\u7ea6\u5730\u5740\u8fc7\u6ee4\u5b83\u4eec\u3002\u5b83\u8fd8\u53ef\u4ee5\u6839\u636e\u6574\u4e2a\u5df2\u77e5\u8fd0\u8425\u5546\u63d0\u4f9b\u7684\u6570\u636e\u4e3a\u6211\u4eec\u7684\u7528\u6237\u63d0\u4f9b\u4ee5\u592a\u574a API\u3002"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"docker-compose.yml")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},'version: "3"\n\nservices:\n  indexer:\n    container_name: indexer\n    image: neonlabsorg/proxy:latest\n    environment:\n      SOLANA_URL: http://solana:8899\n      POSTGRES_DB: neon-db\n      POSTGRES_USER: neon-proxy\n      POSTGRES_HOST: postgres\n      POSTGRES_PASSWORD: neon-proxy-pass\n      CONFIG: ci\n      START_SLOT: LATEST\n    hostname: indexer\n    entrypoint: proxy/run-indexer.sh\n\n    networks:\n      - net\n\nnetworks:\n  net:\n    external: yes\n    name: local\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"How to run it in bash"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"\u5982\u4f55\u5728bash\u4e2d\u8fd0\u884c")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ docker-compose -f indexer/docker-compose.yml pull\n$ docker-compose -f indexer/docker-compose.yml up -d\n")),(0,r.kt)("ol",{start:5},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"\u4ee3\u7406\u670d\u52a1 (Proxy service)"))),(0,r.kt)("p",null,"The Proxy service is a core service that allows Ethereum-like transactions to be processed on ",(0,r.kt)("a",{parentName:"p",href:"https://docs.solana.com/introduction"},"Solana"),", taking full advantage of the functionality native to Solana, including the ability to execute transactions in parallel. It\\'s available on 9090 port."),(0,r.kt)("p",null,"\u4ee3\u7406\u670d\u52a1\u662f\u4e00\u9879\u6838\u5fc3\u670d\u52a1\uff0c\u5b83\u4f7f\u5f97\u5728 Solana \u4e0a\u80fd\u5904\u7406\u7c7b\u4ee5\u592a\u574a\u7684\u4ea4\u6613\uff0c\u5145\u5206\u5229\u7528\u5305\u62ec\u5e76\u884c\u6267\u884c\u4ea4\u6613\u5728\u5185\u7684(\u5404\u79cd) Solana \u539f\u751f\u529f\u80fd\u3002\u5b83\u5728 9090 \u7aef\u53e3\u4e0a\u53ef\u7528\u3002"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"docker-compose.yml")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},'version: "3"\n\nservices:\n  proxy:\n    container_name: proxy\n    image: neonlabsorg/proxy:latest\n    environment:\n      - POSTGRES_DB=neon-db\n      - POSTGRES_USER=neon-proxy\n      - POSTGRES_PASSWORD=neon-proxy-pass\n      - POSTGRES_HOST=postgres\n      - SOLANA_URL=http://solana:8899\n      - EXTRA_GAS=5000\n      - EVM_LOADER=53DfF883gyixYNXnM7s5xhdeyV8mVk9T4i2hGV9vG9io\n      - CONFIG=ci\n      - LOG_NEON_CLI_DEBUG=YES\n      - USE_COMBINED_START_CONTINUE=yes\n      - NEON_CLI_TIMEOUT=60\n      - NEW_USER_AIRDROP_AMOUNT=0\n      - WRITE_TRANSACTION_COST_IN_DB=NO\n      - START_SLOT=LATEST\n      - PERM_ACCOUNT_LIMIT=16\n    hostname: proxy\n    entrypoint: ./proxy/run-proxy.sh\n    ports:\n      - "9090:9090"\n    expose:\n      - "9090"\n    networks:\n      - net\n\nnetworks:\n  net:\n    external: yes\n    name: local\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"How to run it in bash"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"\u5982\u4f55\u5728bash\u4e2d\u8fd0\u884c")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ docker-compose -f proxy/docker-compose.yml pull\n$ docker-compose -f proxy/docker-compose.yml up -d\n")),(0,r.kt)("ol",{start:6},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"\u6c34\u9f99\u5934\u670d\u52a1 (Faucet service)"))),(0,r.kt)("p",null,"The Faucet service provides the liquidity in ","`","NEON","`"," to all the accounts that are mentioned in the incoming requests."),(0,r.kt)("p",null,'\u6c34\u9f99\u5934\u670d\u52a1\u7ed9\u4f20\u5165\u8bf7\u6c42\u4e2d\u63d0\u5230\u7684\u6240\u6709\u8d26\u6237\u63d0\u4f9b"NEON"\u7684\u6d41\u52a8\u6027\u3002'),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"docker-compose.yml")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},'version: "3"\n\nservices:\n\n  faucet:\n    container_name: faucet\n    image: neonlabsorg/faucet:latest\n    environment:\n      - FAUCET_RPC_BIND=0.0.0.0\n      - FAUCET_RPC_PORT=3333\n      - SOLANA_URL=http://solana:8899\n      - NEON_ETH_MAX_AMOUNT=50000\n      - EVM_LOADER=53DfF883gyixYNXnM7s5xhdeyV8mVk9T4i2hGV9vG9io\n      - FAUCET_RPC_ALLOWED_ORIGINS=["https://neonswap.live"]\n      - FAUCET_WEB3_ENABLE=false\n      - FAUCET_SOLANA_ENABLE=true\n      - NEON_OPERATOR_KEYFILE=/opt/faucet/id.json\n      - SOLANA_COMMITMENT=confirmed\n    entrypoint: /opt/faucet/faucet --config /opt/proxy/faucet.conf run\n    ports:\n      - 3333:3333\n    expose:\n      - "3333"\n    networks:\n      - net\n\nnetworks:\n  net:\n    external: yes\n    name: local\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"How to run it in bash"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"\u5982\u4f55\u5728bash\u4e2d\u8fd0\u884c")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ docker-compose -f faucet/docker-compose.yml pull\n$ docker-compose -f faucet/docker-compose.yml up -d\n")),(0,r.kt)("ol",{start:7},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"\u5168\u6d4b\u8bd5\u5957\u4ef6\u670d\u52a1 (Full test suite service)"))),(0,r.kt)("p",null,"The full test suite provides in general the OpenZeppelin tests to make sure the infrastructure deployed by this guide works properly. At the end, the ",(0,r.kt)("inlineCode",{parentName:"p"},"full test suite")," outputs the result in the following form:"),(0,r.kt)("p",null,"\u5b8c\u6574\u7684\u6d4b\u8bd5\u5957\u4ef6\u901a\u5e38\u63d0\u4f9b OpenZeppelin \u6d4b\u8bd5\uff0c\u4ee5\u786e\u4fdd\u672c\u6307\u5357\u90e8\u7f72\u7684\u57fa\u7840\u8bbe\u65bd\u6b63\u5e38\u5de5\u4f5c\u3002\u6700\u540e\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"\u5b8c\u6574\u7684\u6d4b\u8bd5\u5957\u4ef6 (full test suite)"),"\u7528\u4ee5\u4e0b\u5f62\u5f0f\u8f93\u51fa\u7ed3\u679c\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"Full test passing - 1743\nFull test threshold - 1700\nCheck if 1743 is greater or equal 1700\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"full_test_suite/docker-compose.yml")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},'version: "3"\n\nservices:\n\n  full_test_suite:\n    container_name: ${FTS_CONTAINER_NAME:-full_test_suite}\n    image: ${FTS_IMAGE:-neonlabsorg/full_test_suite:develop}\n    entrypoint: ./run-full-test-suite.sh 2>/dev/null\n    environment:\n      - NETWORK_NAME=${NETWORK_NAME}\n      - PROXY_URL=${PROXY_URL}\n      - NETWORK_ID=${NETWORK_ID}\n      - REQUEST_AMOUNT=${REQUEST_AMOUNT}\n      - FAUCET_URL=${FAUCET_URL}\n      - USE_FAUCET=${USE_FAUCET}\n      - SOLANA_URL=${SOLANA_URL}\n      - FTS_USERS_NUMBER=${FTS_USERS_NUMBER}\n      - FTS_JOBS_NUMBER=${FTS_JOBS_NUMBER}\n\n    networks:\n      - net\n\nnetworks:\n  net:\n    external: yes\n    name: local\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"full_test_suite/local.env")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-env"},"NETWORK_NAME=local\nPROXY_URL=http://proxy:9090/solana\nNETWORK_ID=111\nREQUEST_AMOUNT=20000\nFAUCET_URL=http://faucet:3333/request_neon\nUSE_FAUCET=true\nSOLANA_URL=http://solana:8899\nFTS_USERS_NUMBER=15\nFTS_JOBS_NUMBER=8\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"How to run it in bash"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"\u5982\u4f55\u5728bash\u4e2d\u8fd0\u884c")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ docker-compose -f full_test_suite/docker-compose.yml pull\n$ docker-compose -f full_test_suite/docker-compose.yml --env-file full_test_suite/local.env up\n")),(0,r.kt)("h4",{id:"\u65e5\u5fd7-logs"},"\u65e5\u5fd7 (Logs)"),(0,r.kt)("p",null,"After following the previous steps, you will have four running containers for the Neon EVM local environment: ",(0,r.kt)("inlineCode",{parentName:"p"},"solana"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"postgres, proxy, indexer:")),(0,r.kt)("p",null,"\u5b8c\u6210\u4e0a\u8ff0\u6b65\u9aa4\u540e\uff0c\u60a8\u5c06\u62e5\u67094\u4e2a\u7528\u4e8e Neon EVM \u672c\u5730\u73af\u5883\u7684\u8fd0\u884c\u5bb9\u5668\uff1a",(0,r.kt)("inlineCode",{parentName:"p"},"solana"),"\u3001",(0,r.kt)("inlineCode",{parentName:"p"},"postgres\u3001proxy\u3001indexer")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'49c864f47ccd   neonlabsorg/solana:v1.9.12-testnet   "./run.sh"               About an hour ago   Up About an hour (healthy)   8003/udp, 0.0.0.0:8899-8900->8899-8900/tcp, :::8899-8900->8899-8900/tcp, 9900/tcp   solana\n92f6b4492894   neonlabsorg/proxy:latest             "./proxy/run-proxy.sh"   46 hours ago        Up About an hour             0.0.0.0:9090->9090/tcp, :::9090->9090/tcp                                           proxy\n932d4d860629   neonlabsorg/proxy:latest             "proxy/run-indexer.sh"   46 hours ago        Up About an hour             9090/tcp                                                                            indexer\n5a7df37069fc   postgres:14.0                        "docker-entrypoint.s\u2026"   47 hours ago        Up About an hour (healthy)   127.0.0.1:5432->5432/tcp                                                            postgres\n')),(0,r.kt)("p",null,"To look for events or errors, just run the ",(0,r.kt)("inlineCode",{parentName:"p"},"docker logs")," for either the ",(0,r.kt)("inlineCode",{parentName:"p"},"solana")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"proxy")," container:"),(0,r.kt)("p",null,"\u8981\u67e5\u627e\u4e8b\u4ef6\u6216\u9519\u8bef\uff0c\u53ea\u9700\u4e3a ",(0,r.kt)("inlineCode",{parentName:"p"},"solana")," \u6216",(0,r.kt)("inlineCode",{parentName:"p"},"\u4ee3\u7406 (proxy)")," \u5bb9\u5668\u8fd0\u884c",(0,r.kt)("inlineCode",{parentName:"p"},"docker\u65e5\u5fd7 (docker logs)")," \uff1a"),(0,r.kt)("h4",{id:"neon-evm\u5185\u4f7f\u7528remix\u548cmetamask-remix-and-metamask-with-the-neon-evm"},"Neon EVM\u5185\u4f7f\u7528Remix\u548cMetamask (Remix and MetaMask with the Neon EVM)"),(0,r.kt)("p",null,'Set up the \\"MetaMask\\" Chromium extension to connect to the proxy via Custom RPC at ',(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:9090/solana"),". The following image describes how to set up the local Solana connection:"),(0,r.kt)("p",null,"\u5728 ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:9090/solana"),' \u8bbe\u7f6e"MetaMask" \u8fd9\u4e2aChromium\u6269\u5c55\uff08\u63d2\u4ef6\uff09\uff0c\u5e76\u901a\u8fc7\u81ea\u5b9a\u4e49 RPC \u8fde\u63a5\u5230\u4ee3\u7406\u3002\u4e0b\u56fe\u63cf\u8ff0\u4e86\u5982\u4f55\u8bbe\u7f6e\u672c\u5730 Solana \u8fde\u63a5\uff1a'),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://docs.neon-labs.org/assets/images/cluster-install-1-2a934237b77806464af491c468c92f13.png",alt:null})),(0,r.kt)("p",null,"Note: Once you create or import a new account in MetaMask, some NEONs will be airdropped into it."),(0,r.kt)("p",null,"\u6ce8\u610f\uff1a\u5728 MetaMask \u4e2d\u521b\u5efa\u6216\u5bfc\u5165\u65b0\u5e10\u6237\u540e\uff0c\u4f1a\u5411\u5176\u4e2d\u7a7a\u6295\u4e00\u4e9b NEON\u3002"),(0,r.kt)("p",null,"Open Remix (also in Chromium) and select Injected Web3 environment. You can deploy EVM-wrapped smart contracts on Solana and input these instructions:"),(0,r.kt)("p",null,"\uff08\u4e5f\u5728Chromium \u4e2d\uff09\u6253\u5f00 Remix\u5e76\u9009\u62e9 ",(0,r.kt)("inlineCode",{parentName:"p"},"Injected Web3")," environment\u3002\u60a8\u53ef\u4ee5\u5728 Solana \u4e0a\u90e8\u7f72\u5c01\u88c5\u8fc7 EVM \u7684\u667a\u80fd\u5408\u7ea6\u5e76\u8f93\u5165\u4ee5\u4e0b\u6307\u4ee4\uff1a"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://docs.neon-labs.org/assets/images/cluster-install-2-0e37ce12c2afc407dcdd02b669044898.png",alt:null})),(0,r.kt)("h4",{id:"neon-evm-\u7684truffle\u5957\u4ef6-truffle-suite-with-neon-evm"},"Neon EVM \u7684Truffle\u5957\u4ef6 (Truffle Suite with Neon EVM"),(0,r.kt)("p",null,"Truffle is a popular platform to deploy and test Solidity programs. This section shows you how to check the compatibility of the Neon EVM and the Truffle suite."),(0,r.kt)("p",null,"Truffle \u662f\u90e8\u7f72\u548c\u6d4b\u8bd5 Solidity \u6bd4\u8f83\u6d41\u884c\u5e73\u53f0\u3002\u672c\u8282\u5411\u60a8\u5c55\u793a\u5982\u4f55\u68c0\u67e5 Neon EVM \u548c Truffle \u5957\u4ef6\u7684\u517c\u5bb9\u6027\u3002"),(0,r.kt)("p",null,"In the new terminal, create a Truffle project and deploy contracts into EVM:"),(0,r.kt)("p",null,"\u5728\u65b0\u7ec8\u7aef\u4e2d\uff0c\u521b\u5efa\u4e00\u4e2a Truffle \u9879\u76ee\u5e76\u5c06\u5408\u7ea6\u90e8\u7f72\u5230 EVM\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ sudo npm install -g truffle\n$ mkdir myproject && cd myproject\n$ truffle init\n$ npm install web3 @truffle/hdwallet-provider\n")),(0,r.kt)("h5",{id:"truffle\u8bbe\u7f6e-common-truffle-settings"},"Truffle\u8bbe\u7f6e (Common Truffle Settings)"),(0,r.kt)("p",null,"Put your ",(0,r.kt)("inlineCode",{parentName:"p"},"truffle-config.js")," into the Truffle root:",(0,r.kt)("br",{parentName:"p"}),"\n","\u628a\u60a8\u7684",(0,r.kt)("inlineCode",{parentName:"p"},"truffle-config.js")," \u653e\u5165Truffle\u6839\u76ee\u5f55\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'$ echo \'const Web3 = require("web3");\n\nconst Web3eth = require("web3-eth");\nconst HDWalletProvider = require("@truffle/hdwallet-provider");\n\nconst web3eth = new Web3eth();\nconst accs = Array.from(Array(10), (_, x) => web3eth.accounts.create());\nconst privateKeys = accs.map((account) => account.privateKey);\n\nmodule.exports = {\n  networks: {\n    solana: {\n      provider: new HDWalletProvider(privateKeys, "http://127.0.0.1:9090/solana"),\n      from: accs[0].publicKey,\n      network_id: "111",\n      gas: 3000000,\n      gasPrice: 1000000000,\n    }\n  },\n\n  compilers: {\n    solc: {\n      version: "0.8.9"\n    }\n  }\n};\' > truffle-config.js\n')),(0,r.kt)("h5",{id:"\u521b\u5efa\u5408\u7ea6-contract-creation"},"\u521b\u5efa\u5408\u7ea6 (Contract Creation)"),(0,r.kt)("p",null,"Create a trivial contract at ",(0,r.kt)("inlineCode",{parentName:"p"},"contracts/Storage.sol"),":",(0,r.kt)("br",{parentName:"p"}),"\n","\u5728",(0,r.kt)("inlineCode",{parentName:"p"},"contracts/Storage.sol")," \u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u5408\u7ea6\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ echo '// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.7.0 <0.9.0;\n\ncontract Storage {\n    uint256 number;\n\n    function put(uint256 num) public {\n        number = num;\n    }\n\n    function get() public view returns (uint256) {\n        return number;\n    }\n}' > contracts/Storage.sol\n")),(0,r.kt)("h5",{id:"\u6d4b\u8bd5-testing"},"\u6d4b\u8bd5 (Testing)"),(0,r.kt)("p",null,"You can now start testing ",(0,r.kt)("inlineCode",{parentName:"p"},"Storage")," invocations with Truffle facility:"),(0,r.kt)("p",null,"\u60a8\u73b0\u5728\u53ef\u4ee5\u5f00\u59cb\u4f7f\u7528 Truffle \u5de5\u5177\u6d4b\u8bd5",(0,r.kt)("inlineCode",{parentName:"p"},"\u5b58\u50a8 (Storage)"),"\u8c03\u7528\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'$ echo \'const Storage = artifacts.require("Storage");\n\ncontract("Storage", (accounts) => {\n    let storage;\n\n    beforeEach(async () => {\n        storage = await Storage.new();\n    });\n\n    it("should store a value", async () => {\n        const setResult = await storage.put(248);\n        assert.equal(setResult.receipt.status, true);\n        const value = await storage.get();\n        assert.equal(value, 248);\n    })\n})\' > test/Storage.test.js\n\n$ truffle test test/Storage.test.js --network solana\n')),(0,r.kt)("h5",{id:"\u53ef\u80fd\u7684\u95ee\u9898-possible-problems"},"\u53ef\u80fd\u7684\u95ee\u9898 (Possible Problems)"),(0,r.kt)("p",null,"If for some reasons you remove the Solana container and run it again, then all related accounts stored in foreign systems get invalid from that moment. That\\'s why you need to re-run the proxy container and reset the state of MetaMask and Truffle as well, to make all relations consistent."),(0,r.kt)("p",null,"\u5982\u679c\u7531\u4e8e\u67d0\u4e9b\u539f\u56e0\u60a8\u5220\u9664\u4e86 Solana \u5bb9\u5668,\u4e4b\u540e\u518d\u6b21\u8fd0\u884c\uff0c\u5219\u5b58\u50a8\u5728\u5916\u90e8\u7cfb\u7edf\u4e2d\u7684\u6240\u6709\u76f8\u5173\u5e10\u6237\u4ece\u90a3\u65f6\u8d77\u90fd\u5c06\u5931\u6548\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u60a8\u9700\u8981\u91cd\u65b0\u8fd0\u884c\u4ee3\u7406\u5bb9\u5668\u5e76\u91cd\u7f6e MetaMask \u548c Truffle \u7684\u72b6\u6001\uff0c\u4ee5\u4f7f\u6240\u6709\u5173\u7cfb\u4fdd\u6301\u4e00\u81f4\u3002"),(0,r.kt)("p",null,"To reset the MetaMask state, follow the steps at ",(0,r.kt)("inlineCode",{parentName:"p"},"Settings, Advanced, Reset Account"),"."),(0,r.kt)("p",null,"\u8981\u91cd\u7f6eMetaMask\u7684\u72b6\u6001\uff0c\u8bf7\u9075\u5faa\u4e0b\u9762\u7684\u6b65\u9aa4\uff1a\u8bbe\u7f6e(",(0,r.kt)("inlineCode",{parentName:"p"},"Settings),\u9ad8\u7ea7(Advanced),\u91cd\u7f6e\u8d26\u6237\uff08Reset Account\uff09")),(0,r.kt)("p",null,"The Truffle state can be reset by redeploying it in the following way:",(0,r.kt)("br",{parentName:"p"}),"\n","\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u91cd\u65b0\u90e8\u7f72 Truffle \u6765\u91cd\u7f6e\u5b83\u7684\u72b6\u6001\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ truffle compile --network solana --reset\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Deploy your Solidity programs on the\xa0",(0,r.kt)("a",{parentName:"em",href:"https://solana.com/"},"Solana"),"-driven\xa0",(0,r.kt)("a",{parentName:"em",href:"https://neon-labs.org/"},"Neon EVM")),".",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("em",{parentName:"p"},"\u5728",(0,r.kt)("a",{parentName:"em",href:"https://solana.com/"},"Solana"),"\u9a71\u52a8\u7684\xa0",(0,r.kt)("a",{parentName:"em",href:"https://neon-labs.org/"},"Neon EVM")),"\u4e0a\u90e8\u7f72\u60a8\u7684Solidity\u7a0b\u5e8f\uff01"))}k.isMDXComponent=!0}}]);